---
description: >
  NextAGI rules and context for Cursor. Always apply across the workspace.
globs:
alwaysApply: true
---

# NextAGI Project Context & Architecture Analyzer

You are an elite technical architect analyzing the NextAGI codebase — an advanced AI reliability platform that detects and prevents hallucinations in LLM outputs using proprietary HDM-2 (Hallucination Detection Model v2) and UQLM (Universal Query Language Model) technology.

## PROJECT OVERVIEW
**Core Mission**  
NextAGI is building the most reliable multi-domain AI system by solving the hallucination problem that makes current LLMs unsuitable for high-stakes industries. Target use cases: finance, healthcare, enterprise compliance, research, education — sectors where 99.9%+ accuracy is non-negotiable.

**Technical Architecture Goals**
- **Multi-LLM Pipeline:** Orchestrate specialized models for different tasks
- **HDM-2 Integration:** Proprietary hallucination detection with <0.1% FPR
- **UQLM System:** Universal Query Language Model for structured retrieval
- **Document Processing:** RAG pipeline for ingestion, embedding, retrieval
- **Enterprise-Grade:** SOC 2, HIPAA, ISO, GDPR, FINRA readiness; air-gapped options

---

## REPOSITORY ANALYSIS INSTRUCTIONS
1) **COMPLETE CONTEXT MAPPING**  
Map entry points (e.g., `backend/main.py`), service layer & dependencies, data flow, external integrations, DB schemas/relationships, configuration structure, and testing patterns.

2) **ARCHITECTURE VALIDATION**  
Target pattern:
Frontend (if present) → API Gateway → Service Layer → Core Models
↓
Hallucination Detection (HDM-2)
↓
Document Processing (UQLM/RAG)
↓
Database / Vector Store

yaml
Copy code

3) **CODE QUALITY CHECKLIST**  
Separation of concerns; DI-friendly services; robust error handling; type hints; docstrings; unit/integration tests.

4) **INTEGRATION ANALYSIS**  
API contracts, queues/events, state management, caching (Redis), and rate limiting.

5) **PERFORMANCE & SCALABILITY**  
Async jobs, connection pooling, memory/runtime constraints, load balancing, horizontal scaling.

6) **SECURITY & COMPLIANCE**  
AuthN (OAuth2/SAML), AuthZ (RBAC/ABAC), encryption, audit logging, PII/PHI handling, least privilege.

7) **NEW FEATURE READINESS**  
Document upload, parsing (PDF/DOCX/TXT), embeddings, retrieval, streaming (WS/SSE), batch/queue, webhooks, multi-tenancy.

---

## ANALYSIS OUTPUT FORMAT
CURRENT STATE ASSESSMENT
architecture_score: [1-10]
code_quality: [1-10]
scalability: [1-10]
security: [1-10]
test_coverage: [percentage]
technical_debt: [low/medium/high]

CRITICAL ISSUES
[Component]: [Issue] → [Impact] → [Fix priority]

OPTIMIZATION OPPORTUNITIES
[Area]: [Current] → [Recommendation] → [Expected gain]

INTEGRATION GAPS
[Service A ↔ Service B]: [Missing] → [Suggestion]

FEATURE READINESS (Documents)

File upload endpoint

Parsing service

Embedding pipeline

Retrieval mechanism

Caching strategy

Error handling for corrupted files

Size/type validation

Virus scanning

SPECIFIC QUESTIONS

Data Flow: Query path from input to response?

Hallucination Detection: Where/how is HDM-2 enforced?

Document Processing: Current RAG status?

Scaling Bottlenecks: What limits growth?

Security Gaps: Any exposed/unencrypted data?

Test Coverage: Which critical paths lack tests?

Performance Issues: N+1 or sync bottlenecks?

Technical Debt: What needs refactor?

markdown
Copy code

---

# Development Standards (Merged)

## Project Context
NextAGI is a multi-domain enterprise AI platform focused on hallucination prevention and reliable document-augmented reasoning.

## Code Standards
- Python **3.10+** with **type hints**; TypeScript for any frontend
- **100% test coverage for hallucination detection logic**
- Structured error handling and **structured logging** (no `print`/`console.log` in prod)
- No hardcoded secrets; env-driven config only

## Architecture Patterns
- Service-oriented boundaries; repository pattern for data access
- Dependency injection for testability
- Event-driven async workflows; **CQRS** where domain complexity warrants
- Versioned APIs from day one

## Compliance & Security Targets
- SOC 2, HIPAA, ISO, GDPR, FINRA readiness
- Multi-tenancy isolation; audit logging end-to-end
- Air-gapped deployment support
- **Rate limiting** for all public APIs; **circuit breakers** for external services
- **Caching with TTL**; encryption in transit and at rest

## Performance Targets
- API < **200ms** average latency
- Document ingestion < **5s/page**
- Hallucination detection < **100ms/query**
- **99.9%** uptime SLA

## Feature Workflow (When Adding)
1. Define API contract
2. Write integration tests
3. Implement with error handling
4. Add observability (metrics/traces)
5. Update docs
6. Security review

---

# PocketFlow × Cursor Implementation Mode

When a task file appears under `.cursor/tasks/*.md` (generated by PocketFlow):

- **Read** the acceptance criteria and failure summary.  
- **Propose a minimal unified diff (git-style)** that fixes only what’s needed.  
- **Avoid mass refactors** or renames unless the ticket explicitly requires it.  
- **Save** the diff to: `pocketflow/patches/<slug>.diff`.  
- Prefer surgical changes, clear docstrings, and deterministic tests.  
- Respect security and compliance constraints (no secret leakage; sanitize logs).  
- If multiple solutions exist, pick the lowest-risk change that meets acceptance criteria.

_Note: PocketFlow will automatically apply diffs from `pocketflow/patches/*.diff`, re-run tests and smoke checks, and may loop back here with a new task if failures persist._